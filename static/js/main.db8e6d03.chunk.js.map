{"version":3,"sources":["components/Search.js","assets/MarvelLogo.png","components/MarvelCharacters.js","App.js","reportWebVitals.js","index.js"],"names":["Search","Input","SearchComponent","searchTerm","placeholder","style","width","onChange","e","target","value","APIENDPOINT","API_KEY","MarvelCharacters","useState","searchItem","setSearchItem","comicsData","setComicsData","isLoading","setIsLoading","isComicsLoading","setComicsIsLoading","charactersData","setCharactersData","isModalVisible","setIsModalVisible","fetchComics","main_string","ins_string","pos","result","collectionURI","slice","axios","get","then","results","data","useEffect","response","length","toast","error","catch","console","className","src","MarvelLogo","type","size","onClick","marginTop","map","item","title","name","span","thumbnail","path","description","comics","centered","top","visible","onOk","onCancel","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.db8e6d03.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Input } from 'antd';\r\nconst { Search } = Input;\r\nexport default function SearchComponent({ searchTerm }) {\r\n    return (\r\n        <div>\r\n            <Search\r\n                placeholder=\"Enter your character Name..\"\r\n                style={{ width: 500 }}\r\n                onChange={(e) => searchTerm(e.target.value)}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/MarvelLogo.7c66e653.png\";","import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { Card, Image, Button, Col, Row, Modal, Spin } from 'antd';\r\nimport Search from './Search';\r\nimport MarvelLogo from '../assets/MarvelLogo.png';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst APIENDPOINT = `https://gateway.marvel.com:443/v1/public/characters?`;\r\nconst API_KEY = `a302d154b2249cb8cea2ec2c4cb22eac`;\r\n\r\nexport default function MarvelCharacters() {\r\n    const [searchItem, setSearchItem] = useState('');\r\n    const [comicsData, setComicsData] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [isComicsLoading, setComicsIsLoading] = useState(true);\r\n    const searchTerm = (searchItem) => {\r\n        setSearchItem(searchItem);\r\n    }\r\n    const [charactersData, setCharactersData] = useState([]);\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n\r\n    const showModal = () => {\r\n        setIsModalVisible(true);\r\n    };\r\n\r\n    const handleOk = () => {\r\n        setIsModalVisible(false);\r\n        setComicsData([])\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false);\r\n        setComicsData([])\r\n        setComicsIsLoading(true)\r\n    };\r\n\r\n    const insert = function insert(main_string, ins_string, pos) {\r\n        if (typeof (pos) == \"undefined\") {\r\n            pos = 0;\r\n        }\r\n        if (typeof (ins_string) == \"undefined\") {\r\n            ins_string = '';\r\n        }\r\n        return main_string.slice(0, pos) + ins_string + main_string.slice(pos);\r\n    }\r\n\r\n    const fetchComics = (comicsData) => {\r\n        let result = insert(`${comicsData.collectionURI}`, 's', 4)\r\n        axios.get(`${result}?&apikey=${API_KEY}`)\r\n\r\n            .then((results) => {\r\n                setComicsData(results.data.data.results);\r\n                setComicsIsLoading(false)\r\n            })\r\n        showModal();\r\n    }\r\n\r\n    const searchChars = () => {\r\n        setIsLoading(true);\r\n        if (searchItem) {\r\n            axios.get(`${APIENDPOINT}name=${searchItem}&apikey=${API_KEY}`)\r\n                .then((response) => {\r\n                    setCharactersData(response.data.data.results);\r\n                    setIsLoading(false);\r\n                    if (response.data.data.results.length === 0) {\r\n                        toast.error(\"No one here by that name..\");\r\n                    }\r\n                }).catch((error) => {\r\n                    console.error(error)\r\n                })\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (searchItem === '') {\r\n            setIsLoading(true);\r\n            axios.get(`${APIENDPOINT}&apikey=${API_KEY}`)\r\n                .then((response) => {\r\n                    setCharactersData(response.data.data.results);\r\n                    setIsLoading(false);\r\n                    if (response.data.data.results.length === 0) {\r\n                        toast.error(\"No one here by that name..\");\r\n                    }\r\n                }).catch((error) => {\r\n                    console.error(error)\r\n                })\r\n        }\r\n    }, [searchItem])\r\n    return (\r\n        <div className=\"app-body\">\r\n            <img src={MarvelLogo} className=\"marvel-logo\" />\r\n            <Search searchTerm={searchTerm} />\r\n            <Button type=\"primary\"\r\n                size=\"large\"\r\n                onClick={searchChars}\r\n                style={{ marginTop: 20, width: 100 }}\r\n            >\r\n                Search\r\n            </Button>\r\n            <ToastContainer />\r\n            {isLoading ? (\r\n                <div className=\"spinner\">\r\n                    <Spin size=\"large\" />\r\n                    <h4>Loading..Please Wait</h4>\r\n                </div>\r\n            ) : (\r\n                charactersData.map((item) => {\r\n                    return (\r\n                        <Card title={item.name} className=\"card-body\">\r\n                            <Row>\r\n                                <Col span={12}>\r\n                                    <Image\r\n                                        width={200}\r\n                                        src={`${item.thumbnail.path}/portrait_incredible.jpg`}\r\n                                    />\r\n                                </Col>\r\n                                <Col span={12}>\r\n                                    <p>{item.description ? item.description : 'No Description Available'}</p>\r\n                                    <Button type=\"primary\"\r\n                                        size=\"large\"\r\n                                        onClick={() => fetchComics(item.comics)}\r\n                                    >\r\n                                        Open Stories\r\n                                    </Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </Card>\r\n                    )\r\n                })\r\n            )}\r\n            <Modal\r\n                centered\r\n                style={{ top: 20 }}\r\n                title=\"Comics Data\"\r\n                visible={isModalVisible}\r\n                onOk={handleOk}\r\n                onCancel={handleCancel}>\r\n                {isComicsLoading ? (\r\n                    <div className=\"spinner\">\r\n                        <Spin size=\"large\" />\r\n                        <h4>Loading..Please Wait</h4>\r\n                    </div>\r\n                ) : (\r\n                    comicsData.map((item) => {\r\n                        return (\r\n                            <div className=\"comics-data\">\r\n                                <h2>{item.title}</h2>\r\n                                <p>{item.description ? item.description : \"No Description Available..\"}</p>\r\n                            </div>\r\n                        )\r\n                    })\r\n                )}\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\nimport MarvelCharacters from './components/MarvelCharacters';\n\nfunction App() {\n  return (\n    <div>\n      <MarvelCharacters />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'antd/dist/antd.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}